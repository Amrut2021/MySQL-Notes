                              INTRODUCTION : MYSQL     


MySQL is a popular open-source relational database management system (RDBMS) that is used to manage and organize data in databases. It allows users to store, retrieve, modify, and manage data using Structured Query Language (SQL).
 
MySQL is a relational database management system
MySQL is open-source
MySQL is free
MySQL is ideal for both small and large applications
MySQL is very fast, reliable, scalable, and easy to use
MySQL is cross-platform.

1. Database and Tables:
Database: A structured collection of data. In MySQL, databases are used to store tables that contain the actual data.
Table: A collection of related data entries, organized in rows and columns. Each column represents a data field (attribute), and each row is a record (entry).

Relational Database:

RDBMS stands for Relational Database Management System.
RDBMS is a program used to maintain a relational database.
RDBMS is the basis for all modern database systems such as MySQL, Microsoft SQL Server, Oracle, and Microsoft Access.
RDBMS uses SQL queries to access the data in the database.
Uses a tabular structure (tables with rows and columns).
Data is organized into predefined schemas, with relationships between tables (e.g., foreign keys).
Common relational databases include MySQL, PostgreSQL, and Oracle.

Non-Relational Database:

Does not use tables; data can be stored in various formats like documents, key-value pairs, graphs, or wide-column stores.
Schema-less or has flexible schemas, meaning the data structure can vary between records.
Examples include MongoDB (document store), Redis (key-value store), Neo4j (graph database), and Cassandra (wide-column store).


SQL (Structured Query Language):

SQL is a language used to communicate with a database. It allows you to:

Create databases and tables.
Insert data into tables.
Retrieve data (using SELECT queries).
Update existing data.
Delete data from tables.


Basic Queries:

show databases;
create database animal;
use batch1182;
show tables;
drop database batch1182;

select version();
select curtime();
select database();
select user();
select curdate();
select now();


// table creation query : 

create table employee(id int, name varchar(30),address varchar(50));

// Described the table structure.

desc student;


// single entry :

insert into employee values(1,'shubham','pune');


// to Fetch all record in given table.

select * from student; 


// multiple entry :

insert into employee(id,name,address)values(2,'abhishek','pune'),(3,'nisha','nadurbar'),(4,'lochana','jalgaon');



 *) delete data

delete from employee where id =1;


*) update data:

update employee set address = 'pune' where id =2;

 exit;

*****
 
*) PRIMARY KEY : 

The PRIMARY KEY constraint uniquely identifies each record in a table.
Primary keys must contain UNIQUE values, and cannot contain NULL values.
A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields).


Query : create table employee(emp_id int primary key,name varchar(30),mob_numb varchar(20) NOT NULL,salary int(20));


*) NOT NULL :

By default, a column can hold NULL values.
The NOT NULL constraint enforces a column to NOT accept NULL values.
This enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field.


Query : create table employee(emp_id int primary key,name varchar(30),mob_numb varchar(20) NOT NULL,salary int(20));
Query : insert into employee values(105,'NULL','23453453456',350000);


*) How to Check NULL VALUES in Table :


 A field with a NULL value is a field with no value.
 If a field in a table is optional, it is possible to insert a new record or update
 a record without adding a value to this field. Then, the field will be saved with a 
 NULL value.

Note: A NULL value is different from a zero value or a field that contains spaces. 
      A field with a NULL value is one that has been left blank during record creation!

#) We will have to use the IS NULL and IS NOT NULL operators instead.


Query : select * from employee where email IS NOT NULL;
Query : select * from employee where email IS NULL;



*) OPERATORS :    

1) AND : particular single row : Query : select * from employee where emp_id = 101 AND name'ritik';
2) OR  : multiple  rows :        Query : select * from employee where emp_id = 101 OR name = 'sai';
3) NOT :                         Query : select * from employee where NOT salary = 300000;



	******

 
*) ALTER :

The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.
The ALTER TABLE statement is also used to add and drop various constraints on an existing table.


1) Add a new column              : ALTER TABLE employee ADD country varchar(50);
2) Modify an existing column     : ALTER TABLE employee MODIFY mob_numb int;
3) Drop a column                 : ALTER TABLE employee DROP COLUMN email;
4) Rename a column               : ALTER TABLE employee RENAME COLUMN email TO gmail;
5) Rename a table                : ALTER TABLE employee RENAME TO employeeRecord;


TRUNCATE:
 
Purpose: Used to remove all rows from a table.

Query : TRUNCATE TABLE employees;



*) ORDER BY :

The ORDER BY keyword is used to sort the result-set in ascending or descending
 order.
The ORDER BY keyword sorts the records in ascending order by default. To sort the
 records in descending order, use the DESC keyword.

for Ascending order use : ASC
for Descending order use : DESC

select * from employeerecord ORDER BY salary ASC;

select * from employeerecord ORDER BY salary DESC;


*) LIMIT & OFFSET :

#) LIMIT clause is used to specify the number of records to return.
  The LIMIT clause is useful on large tables with thousands of records.
  Returning a large number of records can impact performance.

SELECT * FROM Employee 
LIMIT 3;


#) What if we want to select records 4 - 6 (inclusive)?
  MySQL provides a way to handle this: by using OFFSET.
  The SQL query below says "return only 3 records, start on record 4 (OFFSET 3)" :

SELECT * FROM Employee
LIMIT 3 OFFSET 3;


	*****

*) COMMENTS :

*) Single Line Comments :

 Single line comments start with --.
Any text between -- and the end of the line will be ignored (will not be executed).


 -- WHERE City='Berlin';


*) Multi-line Comments :

Multi-line comments start with /* and end with */.
Any text between /* and */ will be ignored.


/*Select all the columns
of all the records
in the Employee table:*/



*) ALIASES :

Aliases are used to give a table, or a column in a table, a temporary name.
Aliases are often used to make column names more readable.
An alias only exists for the duration of that query.
An alias is created with the AS keyword.

Query : SELECT email AS employee_email FROM employeerecord;



*) AGGREGATE FUNCTIONS :

An aggregate function is a function that performs a calculation on a set of values, and returns a single value.
Aggregate functions are often used with the GROUP BY clause of the SELECT statement. The GROUP BY clause splits the result-set into groups of values and the aggregate function can be used to return a single value for each group.

The most commonly used SQL aggregate functions are:

Aggregate functions ignore null values (except for COUNT()). 

MIN()   : The MIN() function returns the smallest value of the selected column. EX- select Min(salary) from emp;
MAX()   : The MAX() function returns the largest value of the selected column.
COUNT() : The COUNT() function returns the number of rows that matches a specified criterion.
AVG()   : The AVG() function returns the average value of a numeric column. 
SUM()   : The SUM() function returns the total sum of a numeric column. 

 Note: NULL values are ignored.



   *******


*) LIKE OPERATOR :

The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

The percent sign (%) represents zero, one, or multiple characters
The underscore sign (_) represents one, single character
The percent sign and the underscore can also be used in combinations!

LIKE Syntax

Query : SELECT * FROM empdata WHERE name LIKE 'a%';


WHERE Name LIKE 's%'	Finds any values that start with "s"
WHERE Name LIKE '%h'	Finds any values that end with "a"
WHERE Name LIKE '%sh%'	Finds any values that have "sh" in any position
WHERE Name LIKE '_a%'	Finds any values that have "a" in the second position
WHERE Name LIKE 's_%'	Finds any values that start with "s" and are at least 2 characters in length
WHERE Name LIKE 's__%'	Finds any values that start with "s" and are at least 3 characters in length
WHERE Name LIKE 's%m'	Finds any values that start with "s" and ends with "m"


*) IN OPERATOR : 

The IN operator allows you to specify multiple values in a WHERE clause.
The IN operator is a shorthand for multiple OR conditions.


Query : SELECT * FROM empdata WHERE State IN ('maharashtra', 'up', 'mp');

Query : SELECT * FROM empdata WHERE State NOT IN ('mp', 'up');


*) BETWEEN OPERATOR : 

The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.
The BETWEEN operator is inclusive: begin and end values are included.


Query : SELECT * FROM employeerecord WHERE age BETWEEN 10 AND 20;

Query : SELECT * FROM employeerecord WHERE age NOT BETWEEN 100 AND 200;


*) AUTO INCREMENT : 

Auto-increment allows a unique number to be generated a
utomatically when a new record is inserted into a table.
Often this is the primary key field that we would like to be created automatically every time a new record is inserted.

MySQL uses the AUTO_INCREMENT keyword to perform an auto-increment feature.
By default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.

*) DATE DATA TYPE : 

DATE         - format YYYY-MM-DD            = 2024-12-23
DATETIME     - format: YYYY-MM-DD HH:MI:SS  =  2024-09-26 12:25:14 
TIMESTAMP    - format: YYYY-MM-DD HH:MI:SS
YEAR         - format YYYY or YY            = 2024 or 24


*) UNIQUE KEY CONSTRAINT :

The UNIQUE constraint ensures that all values in a column are different.
Both the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns.
A PRIMARY KEY constraint automatically has a UNIQUE constraint.
However, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.


Query : CREATE TABLE student( stud_id int auto_increment primary key, name varchar(40), bench_no int UNIQUE ,sjoin_date DATE);

Query : insert into student(name,bench_no,sjoin_date) values('om',12,'2024-09-23');

Query : ALTER TABLE student AUTO_INCREMENT = 101;




******




GROUP BY & HAVING CLAUSES :

In SQL, the GROUP BY clause is used to group rows that have the same values into summary rows. Often, it is used in conjunction with aggregate functions like COUNT(), SUM(), AVG(), etc., to group data and then apply calculations to each group.

The HAVING clause is used to filter records that work on summarized GROUP BY results, unlike the WHERE clause which filters records before aggregation.

GROUP BY : Used to group rows that share a common attribute.
HAVING   : Filters the groups created by GROUP BY based on a condition/used to Filter the data with specific condition.


Query : SELECT Product, SUM(Amount) AS TotalAmount FROM Sales GROUP BY Product;

Query : SELECT Product, SUM(Amount) AS TotalAmount FROM Sales GROUP BY Product HAVING SUM(Amount) > 300;


Using GROUP BY You want to calculate the total amount for each product:
Using HAVING with GROUP BY Now, if you want to filter only those products where the total amount exceeds 300:



FOREIGN KEY :

A foreign key is a field (or collection of fields) in one table that uniquely identifies a row in another table. The foreign key establishes a link between two tables, ensuring referential integrity by restricting the values that can be inserted into the foreign key column(s).null values allowed.

Key Concepts of a Foreign Key:

Parent Table: The table containing the primary key that the foreign key references.
Child Table: The table that includes the foreign key column(s) referring to the parent table.


*) JOINS : 

A JOIN clause is used to combine rows from two or more tables, based on a related column between them.
Joins are used to retrieve data from multiple tables in a single query. MySQL supports different types of joins, each serving a specific purpose.


types of joins:

1. INNER JOIN        = The INNER JOIN keyword selects records that have matching values in both tables.

2. LEFT JOIN         = The LEFT JOIN keyword returns all records from the left table (table1), and the matching records (if any) from the right table (table2).

3. RIGHT JOIN        = The RIGHT JOIN keyword returns all records from the right table (table2), and the matching records (if any) from the left table (table1).

4. FULL OUTER JOIN   = A FULL JOIN returns all records when there is a match in either the left or right table.

5. CROSS JOIN        = The CROSS JOIN keyword returns all records from both tables (table1 and table2).

6. SELF JOIN         = Shows employees and their managers (from the same table)./ it is a regular join, but the table is joined with itself.


*) UNION OPERATOR :

- The UNION operator is used to combine the result-set of two or more SELECT statements.


Create the 2 tables employees and departments tables:


CREATE TABLE departments(dept_id INT PRIMARY KEY,dept_name VARCHAR(50));



CREATE TABLE employees (emp_id INT PRIMARY KEY,name VARCHAR(50),dept_id INT,FOREIGN KEY (dept_id) REFERENCES departments(dept_id));



INSERT RECORD : 


INSERT INTO departments (dept_id, dept_name) VALUES (1, 'HR'),(2, 'Engineering'),(3, 'Finance'),(4, 'Marketing'); 


INSERT INTO employees (emp_id, name, dept_id)VALUES (101, 'Alice', 1),(102, 'Bob', 2),(103, 'Charlie', 2),(104, 'David', NULL);





1. INNER JOIN :

Query : SELECT employees.name AS Employee, departments.dept_name AS Department
FROM employees
INNER JOIN departments
ON employees.dept_id = departments.dept_id;


2. LEFT JOIN :

Query : SELECT employees.name AS Employee, departments.dept_name AS Department
FROM employees
LEFT JOIN departments
ON employees.dept_id = departments.dept_id;

 

3. RIGHT JOIN :

Query : SELECT employees.name AS Employee, departments.dept_name AS Department
FROM employees
RIGHT JOIN departments
ON employees.dept_id = departments.dept_id;



4. FULL OUTER JOIN : (combination of LEFT JOIN  & RIGHT JOIN)

Query : SELECT employees.name AS Employee, departments.dept_name AS Department
FROM employees
LEFT JOIN departments
ON employees.dept_id = departments.dept_id

UNION

SELECT employees.name AS Employee, departments.dept_name AS Department
FROM employees
RIGHT JOIN departments
ON employees.dept_id = departments.dept_id;


5. CROSS JOIN :

Query : SELECT employees.name AS Employee, departments.dept_name AS Department
FROM employees
CROSS JOIN departments;


6. SELF JOIN :

Query : ALTER TABLE employees ADD manager_id INT;

UPDATE employees
SET manager_id = 101 WHERE emp_id = 102;  
UPDATE employees
SET manager_id = 102 WHERE emp_id = 103;  
UPDATE employees
SET manager_id = 101 WHERE emp_id = 104; 


Query : SELECT e1.name AS Employee, e2.name AS Manager
FROM employees e1
INNER JOIN employees e2
ON e1.manager_id = e2.emp_id;


Task on JOINS : 

task.1

create two tables students and courses.

Fetch the names of students along with the courses they are enrolled in using an INNER JOIN.
Fetch the names of all students, including those who are not enrolled in any course, using a LEFT JOIN.
Fetch the names of all courses, including those without any students enrolled, using a RIGHT JOIN.
Fetch all students and courses (even if they do not match) using a FULL JOIN.
Use a SELF JOIN to find students from the same course.


END OF ERA ...!

Summary and Interview Questions :

MySQL & SQL
What is MySQL? How is it different from SQL?
What are the key differences between SQL and NoSQL databases?

Database and Tables
What is a database? How is it different from a table?
How do you create a table in MySQL? Provide an example.
What are the different types of databases, and when would you use each?

Relational Database
What is a relational database? How does it differ from a non-relational database?
What are the advantages of using a relational database?

Non-Relational Database
What is a non-relational database? Can you give some examples?
When would you choose a non-relational database over a relational one?

Primary Key
What is a primary key? Why is it important?
Can a table have more than one primary key? Why or why not?

NOT NULL
What is the NOT NULL constraint in SQL? How is it used?
Can you give an example of how to apply the NOT NULL constraint?

How to Check NULL VALUES in Table
How do you check for NULL values in a SQL query?
What is the difference between IS NULL and IS NOT NULL in SQL?

Operators
What are operators in SQL? Can you name and describe the different types of operators (e.g., comparison, logical)?
What is the difference between the AND and OR and NOT operators in SQL?

ALTER
What is the ALTER command in SQL? When would you use it?
How do you add a new column to an existing table using ALTER?

TRUNCATE
What is the TRUNCATE command? How is it different from the DELETE command?
When should you use TRUNCATE instead of DELETE?

ORDER BY
What does the ORDER BY clause do in SQL? Can you provide an example?
How do you sort data in ascending and descending order using ORDER BY?

Comments
How do you add comments in a SQL query?
Why is it a good practice to include comments in your SQL code?

Aliases
What is an alias in SQL, and how is it used?
Can you provide an example of using an alias with a column name?

Aggregate Functions
What are aggregate functions in SQL? Name a few common ones.
How would you calculate the total, average, and count of values in a column using aggregate functions?

LIKE Operator
What is the LIKE operator in SQL? When is it used?
Can you provide an example using the LIKE operator with wildcards?

IN Operator
What does the IN operator do in SQL?
Can you provide an example using the IN operator to filter records?

BETWEEN Operator
How is the BETWEEN operator used in SQL?
Can you provide an example where BETWEEN is used to select a range of values?

AUTO INCREMENT
What is AUTO INCREMENT in SQL? How is it typically used?
Can you give an example of creating a table with an AUTO INCREMENT column?

UNIQUE Key Constraint
What is the UNIQUE key constraint in SQL? How is it different from the primary key?
Can you provide an example of how to apply the UNIQUE constraint on a column?

GROUP BY & HAVING Clauses
What is the GROUP BY clause in SQL? How does it work?
What is the difference between WHERE and HAVING clauses in SQL?
Can you provide an example using GROUP BY and HAVING in a query?

Foreign Key
What is a foreign key in SQL? Why is it important?
Can a table have multiple foreign keys? Explain.

Joins
What are joins in SQL? Can you name and explain the different types of joins (e.g., INNER JOIN, LEFT JOIN)?
What is the difference between INNER JOIN and LEFT JOIN?

UNION Operator
What is the UNION operator in SQL, and when is it used?
Can you explain the difference between UNION and UNION ALL?
These questions cover a wide range of topics that could be asked in a fresher-level interview on MySQL, SQL, and database-related concepts.

     

